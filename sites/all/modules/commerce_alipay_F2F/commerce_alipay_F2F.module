<?php

/**
 * @file
 * Implements Alipay in Drupal Commerce checkout.
 */

/**
 * Implements hook_menu().
 */
function commerce_alipay_F2F_menu() {
  // Add a menu callback for Alipay's notification on operation processing.
  $items['commerce_alipay_F2F/notify'] = array(
    'page callback' => 'commerce_alipay_F2F_process_notify',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
   $items['commerce_alipay_F2F/return'] = array(
    'page callback' => 'commerce_alipay_F2F_process_return',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  
  
  //添加网页支付回调函数
  $items['commerce_alipay_Page/notify'] = array(
    'page callback' => 'commerce_alipay_F2F_process_notify',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  //添加移动支付回调函数
  $items['commerce_alipay_Wap/notify'] = array(
    'page callback' => 'commerce_alipay_F2F_process_notify',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_alipay_F2F_commerce_payment_method_info() {
  $payment_methods = array();

  // Declare Alipay payment method to redirect to external site.
 
  $payment_methods['alipay_F2F'] = array(
    'base' => 'commerce_alipay_F2F',
    'title' => t('支付宝扫码支付'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );
  $payment_methods['alipay_Page'] = array(
    'base' => 'commerce_alipay_F2F',
    'title' => t('支付宝网页支付'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );
  $payment_methods['alipay_Wap'] = array(
    'base' => 'commerce_alipay_F2F',
    'title' => t('支付宝手机支付'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_alipay_F2F_settings_form($settings = NULL) {
  $form = array();

  $settings = (array) $settings + array(
    'service' => 'create_direct_pay_by_user',
    'seller_email' => '',
    'partner' => '',
    'key' => '',
    'debug' => '',
  );
  // Declare form settings to configure the Alipay payment method.
  $form['service'] = array(
    '#type' => 'select',
    '#title' => t('Payment service type'),
    '#prefix' => t("Configure Alipay payment settings below with the corresponding account information.<br/>If you do not already have an account feel free to create a new merchant account at <a href='@link_alipayreg'>Alipay's Enterprise account registration</a> page.<br/>More help could be found on the official website at: <a href='@link_alipayhelp'>How to create a new enterprise account on Alipay's website</a> <em>(Chinese version)</em>.", array('@link_alipayreg' => 'https://memberprod.alipay.com/account/reg/enterpriseIndex.htm', '@link_alipayhelp' => 'http://help.alipay.com/lab/help_detail.htm?help_id=211702')),
    '#description' => t('Select the type of service provided by Alipay to process payments.<br/><strong>Currently only Instant Payment is fully supported.</strong>'),
    '#default_value' => $settings['service'],
    '#options' => array(
      'create_direct_pay_by_user' => t('Instant'),
      'create_partner_trade_by_buyer' => t('Escrow'),
      'trade_create_by_buyer' => t('Dual-function'),
      'send_goods_confirm_by_platform' => t('Delivery Confirmation'),
	  'create_direct_pay_by_user_F2F' => t('支付宝扫码支付'),
    ),
    '#required' => TRUE,
  );
  // Seller email should be an email address format.
  $form['seller_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Seller email'),
    '#description' => t('The seller email with which the Alipay account was registered for the corresponding type of service.'),
    '#default_value' => $settings['seller_email'],
    '#required' => TRUE,
  );
  // Partner ID should be long string.
  $form['partner'] = array(
    '#type' => 'textfield',
    '#title' => t('Partner ID'),
    '#description' => t("The Partner ID of the Alipay account on which payments should be credited."),
    '#default_value' => $settings['partner'],
    '#required' => TRUE,
  );
  // Alipay Key should be long string.
  $form['key'] = array(
    '#type' => 'textfield',
    '#title' => t('Key'),
    '#description' => t("The Key code provided by Alipay's API for the corresponding account and type of service."),
    '#default_value' => $settings['key'],
    '#required' => TRUE,
  );
  // Enable debug mode.
  $form['debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable debug mode <strong>(for development use only)</strong>'),
    '#description' => t('<strong>Override all transactions to a total of 0.01 CNY</strong> for testing the configuration and making sure that payments can be received on the correct account.<br/>This setting should only be used for development purposes.'),
    '#default_value' => $settings['debug'],
  );
  //dsm($form);
  return $form;
}

/**
 * Payment method callback: adds a message to the submission form.
 */
function commerce_alipay_F2F_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form['alipay_information'] = array(
    '#markup' => '<span class="commerce-alipay-info">' .''. '</span>',
  );
 
  return $form;
}

/**
 * Payment method callback: redirect form.
 *
 * Prepares the necessary data to be passed to Alipay with the redirection.
 */
function commerce_alipay_F2F_redirect_form($form, &$form_state, $order, $payment_method) {
  //结算过程已经结束，只差付款
  commerce_order_status_update($order, 'wait_buyer_pay');
 
  // Return an error if the enabled action's settings haven't been configured.
  if (empty($payment_method['settings']['partner'])) {
    drupal_set_message(t('Alipay is not configured for use. No Partner ID has been specified.'), 'error');
    // @TODO Minor: this case keeps redirecting to the same page with error.
    // Maybe the redirection should be interrupted.
    return array();
  }
  $form = array();
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  // Override transaction amount if debug mode is enabled.
  $amount = $payment_method['settings']['debug'] ? 1 : $wrapper->commerce_order_total->amount->value();

  // Set feedback URLs.
  $settings = array(
    // Return to the payment redirect page for processing successful payments.
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    'notify' => url('commerce_alipay_F2F/notify', array('absolute' => TRUE)),
  );
  $settings = $payment_method['settings'] + $settings;

  // Declare the data to be provided through Alipay's API to process payment.
  $data = array(
    'service' => $settings['service'],
    'payment_type' => '1',
    'partner' => $settings['partner'],
    'seller_email' => $settings['seller_email'],
    'return_url' => $settings['return'],
    'notify_url' => $settings['notify'],
    '_input_charset' => 'UTF-8',
    'show_url' => $settings['return'],
    'out_trade_no' => $order->order_number,
    'subject' => t('order !order_id', array('!order_id' => $order->order_number)),
    'body' => commerce_alipay_F2F_data_body($order),
    'total_fee' => commerce_currency_amount_to_decimal($amount, 'CNY'),
    'sign_type' => 'MD5',
  );
  // Provide a method for other modules to alter Alipay's API transaction data.
  drupal_alter('commerce_alipay_F2F_parameter', $data, $settings, $order);
  // Encrypted transaction signature.
  $data['sign'] = commerce_alipay_F2F_sign($settings['key'], $data);
  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $value = trim($value);
      // Add the value as a hidden form element.
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }
  // Override submit callback to redirect to Alipay's payment page.
  //$form['submit'] = array(
  //  '#type' => 'submit',
  //  '#value' => t('Proceed with payment'),
  //  '#submit' => array('commerce_alipay_F2F_redirect'),
  //);
   
   if($payment_method['method_id']=='alipay_F2F'){
      require_once DRUPAL_ROOT.'/F2FPay/f2fpay/F2fpay.php';
      $PayUri = commerce_alipay_F2F_redirect($form, $form_state);
   //dsm($PayUri);
   form_state_values_clean($form_state);
   $form['qrcode'] = array(
    '#markup' => '<div class="alipayLogo"></div><div id="qrcode" class="jingheqrcode"></div>',
	'#attached' => array('css'=> 
						  array(
                            drupal_get_path('module', 'commerce_alipay_F2F') . '/theme/sunxike.css',
                          ),
                          'js' => array(
                            drupal_get_path('module', 'commerce_alipay_F2F') . '/js/qrcode.js',
							drupal_get_path('module', 'commerce_alipay_F2F') . '/js/redirect.js',
                          ),

						),
    );
	drupal_add_js("(function($){
              jQuery(document).ready(function () {
                               var qrcode = new QRCode(document.getElementById('qrcode'), {
                               width : 196,//设置宽高
                               height : 196
                                });
                               qrcode.makeCode('".$PayUri."');
              });
            })(jQuery);", array('type' => 'inline', 'scope' => 'footer', 'weight' => 16) );

   }
   else if($payment_method['method_id']=='alipay_Page'){
      require_once DRUPAL_ROOT.'/PagePay/pagepay/jhpagepay.php';
	  //商户订单号，商户网站订单系统中唯一订单号，必填
    $out_trade_no = trim($form['out_trade_no']['#value']);

    //订单名称，必填
    $subject = trim($form['subject']['#value']);

    //付款金额，必填
    $total_amount = trim($form['total_fee']['#value']);

    //商品描述，可空
    $body = trim('');

	//构造参数
	$payRequestBuilder = new AlipayTradePagePayContentBuilder();
	$payRequestBuilder->setBody($body);
	$payRequestBuilder->setSubject($subject);
	$payRequestBuilder->setTotalAmount($total_amount);
	$payRequestBuilder->setOutTradeNo($out_trade_no);

	$aop = new AlipayTradeService($config);

	/**
	 * pagePay 电脑网站支付请求
	 * @param $builder 业务参数，使用buildmodel中的对象生成。
	 * @param $return_url 同步跳转地址，公网可以访问
	 * @param $notify_url 异步通知地址，公网可以访问
	 * @return $response 支付宝返回的信息
 	*/
	//dsm($aop);
	$response = $aop->pagePay($payRequestBuilder,$config['return_url'],$config['notify_url']);
	//form_state_values_clean($form_state);
	//$form['helpForm'] = array(
    //    '#markup' => $response,
    //);
	 //dsm($response);
	 //drupal_form_submit('commerce-alipay-f2f-redirect-form', $form_state);
     //$form_state['programmed']=TRUE;
	 $form_state['redirect'] = $response;
	 $function = drupal_installation_attempted() ? 'install_goto' : 'drupal_goto';
     $function($form_state['redirect']);

   }
   else if($payment_method['method_id']=='alipay_Wap'){
    
      require_once DRUPAL_ROOT.'/WapPay/wappay/pay.php';
	  if (!empty($form['out_trade_no']['#value'])&& trim($form['out_trade_no']['#value'])!=""){
    //商户订单号，商户网站订单系统中唯一订单号，必填
    $out_trade_no = trim($form['out_trade_no']['#value']);
    //dsm($payment_method);
     //订单名称，必填
    $subject = trim($form['subject']['#value']);

    //付款金额，必填
    $total_amount = trim($form['total_fee']['#value']);

    //商品描述，可空
    $body = trim('');

    //超时时间
    $timeout_express="1m";

    $payRequestBuilder = new AlipayTradeWapPayContentBuilder();
    $payRequestBuilder->setBody($body);
    $payRequestBuilder->setSubject($subject);
    $payRequestBuilder->setOutTradeNo($out_trade_no);
    $payRequestBuilder->setTotalAmount($total_amount);
    $payRequestBuilder->setTimeExpress($timeout_express);

    $payResponse = new AlipayTradeService($config);
    $result=$payResponse->wapPay($payRequestBuilder,$config['return_url'],$config['notify_url']);
	//dsm($result);
     $form_state['redirect'] = $result;
	 $function = drupal_installation_attempted() ? 'install_goto' : 'drupal_goto';
     $function($form_state['redirect']);

   }
   }
  return $form;
}



/**
 * Redirects the transaction to Alipay's payment gateway.
 */
function commerce_alipay_F2F_redirect($form, &$form_state) {
    //dsm($form['out_trade_no']['#value']);
   //dsm($form_state);
   
	 //$form['commerce_payment']['payment_method']['#attached']['css'][] = drupal_get_path('module', 'commerce_alipay_F2F') . '/theme/commerce_alipay_F2F.theme.css';
   if (!empty($form['out_trade_no']['#value'])&& trim($form['out_trade_no']['#value'])!=''){
      //dsm($form);
	  $f2fpay = new F2fpay();
	
	  $out_trade_no = trim($form['out_trade_no']['#value']);
	  $total_amount = trim($form['total_fee']['#value']);
	  $subject = trim($form['subject']['#value']);
	
	  $response = 	$f2fpay->qrpay($out_trade_no,  $total_amount, $subject);
	  //dsm($response);
	  //print_r($response);
	  return $response->alipay_trade_precreate_response->qr_code;
   }
  // URL for directing incoming payment transaction requests.
  //$url = 'https://mapi.alipay.com/gateway.do?';
  //form_state_values_clean($form_state);
  //$data = drupal_http_build_query($form_state['values']);
  //$form_state['redirect'] = $url . $data;
}

/**
 * Payment method callback: redirect form validate.
 */
function commerce_alipay_F2F_redirect_form_validate($order, $payment_method) {
  return commerce_alipay_F2F_notify_validate($order, $payment_method, $_GET);
}

/**
 * Payment method callback: redirect form submit.
 */
function commerce_alipay_F2F_redirect_form_submit($order, $payment_method) {
  return commerce_alipay_F2F_notify_submit($order, $payment_method, $_GET);
}

/**
 * Menu callback function to process Alipay's feedback notifications.
 */
function commerce_alipay_F2F_process_notify() {
   // Log an entry of the notification received for a transaction.
  watchdog('commerce_alipay_F2F', 'Customer returned from Alipay with the following data');
  if (empty($_POST)) {
    return FALSE;
  }
  
  //$order = commerce_order_load($_POST['out_trade_no']);
  //$order = commerce_order_load(25);
  $order = commerce_order_number_load($_POST['out_trade_no']);
  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
  // Validate the received notification from Alipay.
  
  if (commerce_alipay_F2F_notify_validate($order, $payment_method, $_POST)) {
    
    commerce_alipay_F2F_notify_submit($order, $payment_method, $_POST);
  }
    //echo json_encode($payment_method);
	 //echo "success2";
    // return;  
}

/**
 * Menu callback function to process Alipay's feedback notifications.
 */
function commerce_alipay_F2F_process_return() {
 
   global $user;
  drupal_goto('/user/'.$user->uid.'/orders/');
  dsm( $result);
  return FALSE;//不在返回页面做逻辑处理
   // Log an entry of the notification received for a transaction.
  watchdog('commerce_alipay_F2F', 'Customer returned from Alipay with the following data');
  if (empty($_GET)) {
    return FALSE;
  }
  
  $order = commerce_order_number_load($_GET['out_trade_no']);
  //$order = commerce_order_load(25);
  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
  // Validate the received notification from Alipay.
  
  //if (commerce_alipay_F2F_notify_validate($order, $payment_method, $_POST)) {
    $_GET['trade_status'] = 'WAIT_SELLER_SEND_GOODS';
    commerce_alipay_F2F_notify_submit($order, $payment_method, $_GET);
  //}
    //echo json_encode($payment_method);
	 //echo "success2";
    // return;  
}


/**
 * Validation of Alipay's notifications.
 */
function commerce_alipay_F2F_notify_validate($order, $payment_method, $notify) {
   // Log an entry of the notification received for a transaction.
  //watchdog('commerce_alipay_F2F', 'Customer returned from Alipay with the following data:<pre>@notify</pre>', array('@notify' => print_r($notify, TRUE)));
  //return TRUE;
  if (empty($notify)) {
    return FALSE;
  }
  
  //采用官方代码
  if($payment_method['method_id']=='alipay_Wap'){
     require_once DRUPAL_ROOT.'/WapPay/jhnotify_url.php';
  }
  else if($payment_method['method_id']=='alipay_Page'){
     require_once DRUPAL_ROOT.'/PagePay/jhnotify_url.php';
  }
  else{
    require_once DRUPAL_ROOT.'/PagePay/jhnotify_url.php';
  }
  
  $arr=$_POST;
  $alipaySevice = new AlipayTradeService($config); 
  $alipaySevice->writeLog(var_export($_POST,true));
  $result = $alipaySevice->check($arr);
 
  
  
  // Log an entry of the notification received for a transaction.
  watchdog('commerce_alipay_F2F', 'Customer returned from Alipay with the following data:<pre>@notify</pre>', array('@notify' => print_r($notify, TRUE)));
   return $result;
  
  
  
  $notify = drupal_get_query_parameters($notify);
  // Encrypted transaction signature.
  $sign = commerce_alipay_F2F_sign($payment_method['settings']['key'], $notify);
  // Verification is done by querying the following Alipay API URL.
  $verify_url = extension_loaded('openssl') ? 'https://mapi.alipay.com/gateway.do?service=notify_verify&' : 'http://notify.alipay.com/trade/notify_query.do?';
  $result = drupal_http_request($verify_url . 'partner=' . $payment_method['settings']['partner'] . '&notify_id=' . $notify["notify_id"]);
  if ($result->data == 'true' && $sign == $notify['sign']) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Submit and process a notification feedback from Alipay for a transaction.
 *
 * This function creates or updates payment transaction records for
 * corresponding orders depending on the status of the notifications received.
 */
function commerce_alipay_F2F_notify_submit($order, $payment_method, $notify) {
  //http://www.jhvege.com/?total_amount=20.00&timestamp=2017-06-23+22%3A51%3A52&sign=OiaJ2iFLrGhwquLSGpN153hlUbQwsvtmR6pyqE6Rss2qRE9G3czwpwDPhhvclG5kJjYXNuhGByDWx5DCTE7A7lf%2FZzUTsga5EwIdDsrFF7LKdVG3%2FQTTaYq8gOm8oGEBFtgLRv1WBgdc0VOeHeINEwSem2quf2mV%2BnCw49JS6yM%3D&trade_no=2017062321001004450200187302&sign_type=RSA&auth_app_id=2016080500176115&charset=UTF-8&seller_id=2088102170120602&method=alipay.trade.page.pay.return&app_id=2016080500176115&out_trade_no=12017062322502544&version=1.0
  // Attempt to load prior authorization capture IPN created previously.
  $transactions = commerce_payment_transaction_load_multiple(array(), array('remote_id' => $notify["trade_no"]));
  
  if (!empty($transactions)) {
    // @TODO: Load the prior transaction ID and update with the capture values.
    // There is probably some special handling necessary in this case.
    $transaction = reset($transactions);
  }
  else {
    // Create a new payment transaction for the order.
    $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
  }
  // Currently supports only transactions in CNY.
  $transaction->amount = commerce_currency_decimal_to_amount($notify['total_amount'], 'CNY');
  $transaction->currency_code = 'CNY';

  $transaction->remote_id = $notify["trade_no"];
  // Set the transaction's statuses based on notify's trade_status.
  $transaction->remote_status = $notify['trade_status'];
  $transaction->data['notify'] = $notify;

  // Handle refund types of cases.
  if (isset($notify['refund_status'])) {
    switch ($notify['refund_status']) {
      // Pending seller accept refund request.
      case 'WAIT_SELLER_AGREE':
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        $transaction->message = commerce_alipay_F2F_status_message($notify['refund_status']);
        commerce_order_status_update($order, 'wait_seller_agree');
        break;

      // Success refund transaction.
      case 'REFUND_SUCCESS':
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        $transaction->message = commerce_alipay_F2F_status_message($notify['refund_status']);
        commerce_order_status_update($order, 'refund_success');
        break;
    }
  }
  else {
    // Handle trade types of cases.
    switch ($notify['trade_status']) {
      // Operation canceled.
      case 'TRADE_CLOSED':
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        $transaction->message = commerce_alipay_F2F_status_message($notify['trade_status']);
        commerce_order_status_update($order, 'canceled');
        break;

      // Pending seller to send goods.
      case 'WAIT_SELLER_SEND_GOODS':
	  case 'TRADE_SUCCESS':
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        $transaction->message = commerce_alipay_F2F_status_message('WAIT_SELLER_SEND_GOODS');
        commerce_order_status_update($order, 'wait_send_goods');
        break;

      // Pending buyer to confirm goods received.
      case 'WAIT_BUYER_CONFIRM_GOODS':
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        $transaction->message = commerce_alipay_F2F_status_message($notify['trade_status']);
        commerce_order_status_update($order, 'wait_buyer_confirm');
        break;

      // Pending buyer to process payment.
      case 'WAIT_BUYER_PAY':
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        $transaction->message = commerce_alipay_F2F_status_message($notify['trade_status']);
        commerce_order_status_update($order, 'wait_buyer_pay');
        break;

      // Transaction complete.
      case 'TRADE_FINISHED':
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $transaction->message = commerce_alipay_F2F_status_message($notify['trade_status']);
        // No need to change order status when Instant Payment is successful.
        if ($notify['exterface']!= "create_direct_pay_by_user") {
          commerce_order_status_update($order, 'completed');
        }
        break;

      // Transaction successful.
      case 'TRADE_SUCCESS1':
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $transaction->message = commerce_alipay_F2F_status_message($notify['trade_status']);
        // No need to change order status when Instant Payment is successful.
        if ($notify['exterface']!= "create_direct_pay_by_user") {
          commerce_order_status_update($order, 'completed');
        }
        break;
    }
  }
  // Save the payment transaction and redirect to next page.
  commerce_payment_transaction_save($transaction);
  commerce_payment_redirect_pane_next_page($order);
  // Record an entry of the transaction with the order and trade numbers.
  watchdog('commerce_alipay_F2F', 'Notify processed for Order @order_number with ID @trade_no.', array('@trade_no' => $notify["trade_no"], '@order_number' => $order->order_number), WATCHDOG_INFO);

  echo "success";
}

/**
 * Callback for body description.
 *
 * This callback allows setting a more complete description of the order on
 * Alipay's payment details page.
 */
function commerce_alipay_F2F_data_body($order) {
  if (empty($order)) {
    return '';
  }
  else {
    // Get a list of the items from the order to be paid.
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $line_items = $order_wrapper->commerce_line_items->value();
	$body=array();//
    foreach ($line_items as $line_item) {
      if ($line_item->type == 'product' && !empty($line_item->commerce_product)) {
        $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
        $body[] = $line_item_wrapper->commerce_product->title->value();
      }
    }
    return implode(' | ', $body);
  }
}

/**
 * Helper function to provide an encrypted signature to be passed to Alipay.
 */
function commerce_alipay_F2F_sign($key, $para = array(), $sign_type = 'MD5') {
  ksort($para);
  reset($para);
  foreach ($para as $k => $val) {
    if (!in_array($k, array('sign', 'sign_type')) && !empty($val)) {
      $para_filter[] = $k . '=' . $val;
    }
  }
  $arg = implode('&', $para_filter);
  if (get_magic_quotes_gpc()) {
    $arg = stripslashes($arg);
  }
  return md5($arg . $key);
}

/**
 * Returns an appropriate message for a given status.
 */
function commerce_alipay_F2F_status_message($status) {
  switch ($status) {
    // Messages used for refund types of cases.
    case 'WAIT_SELLER_AGREE':
      return t('The refund request is waiting for seller to agree.');

    case 'REFUND_SUCCESS':
      return t('Seller agrees on the refund request.');

    // Messages used for trade types of cases.
    case 'TRADE_CLOSED':
      return t('The payment has failed. This happens only if the payment was made from your customer’s bank account.');

    case 'WAIT_SELLER_SEND_GOODS':
      return t('The payment is waiting for the seller to send goods.');

    case 'WAIT_BUYER_CONFIRM_GOODS':
      return t('Seller has already sent the goods, pending buyer to confirm.');

    case 'WAIT_BUYER_PAY':
      return t('The payment is waiting for the buyer to pay.');

    case 'TRADE_FINISHED':
      return t('The payment has completed.');

    case 'TRADE_SUCCESS':
      return t('The payment has completed.');
  }
}

/**
 * Implements hook_commerce_order_status_info().
 *
 * Define additional order statuses used to interact with Alipay's API
 * depending on the type of service and the feedback notifications received.
 */
function commerce_alipay_F2F_commerce_order_status_info() {
  $order_statuses = array();

  // Status used for trade types of cases.
  $order_statuses['wait_send_goods'] = array(
    'name' => 'wait_send_goods',
    'title' => t('等待发货'),
    'state' => 'pending',
  );

  $order_statuses['wait_buyer_pay'] = array(
    'name' => 'wait_buyer_pay',
    'title' => t('等待付款'),
    'state' => 'pending',
  );

  $order_statuses['wait_buyer_confirm'] = array(
    'name' => 'wait_buyer_confirm',
    'title' => t('Wait for buyer to confirm'),
    'state' => 'pending',
  );

  // Status used for refund types of cases.
  $order_statuses['wait_seller_agree'] = array(
    'name' => 'wait_seller_agree',
    'title' => t('Wait for seller to agree refund request.'),
    'state' => 'pending',
  );

  $order_statuses['refund_success'] = array(
    'name' => 'refund_success',
    'title' => t('Refund success. (Transaction canceled)'),
    'state' => 'canceled',
  );

  return $order_statuses;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the payment method selection pane on Checkout to add Alipay icons.
 */
function commerce_alipay_F2F_form_commerce_checkout_form_alter(&$form, &$form_state) {
  // If this checkout form contains the payment method radios...
  if (!empty($form['commerce_payment']['payment_method']['#options'])) {
    // Loop over its options array looking for a Alipay option.
    foreach ($form['commerce_payment']['payment_method']['#options'] as $key => &$value) {
      list($method_id, $rule_name) = explode('|', $key);

      // If we find Alipay...
      if ($method_id == 'alipay') {
        // Prepare the replacement radio button text with icons.
        $icons_path = drupal_get_path('module', 'commerce_alipay_F2F') . '/images/';

        // Generate Alipay logo image markup.
        $alipay_label = t('Alipay');
        $alipay_icon = theme('image', array(
          'path' => $icons_path . 'alipay.gif',
          'title' => $alipay_label,
          'alt' => $alipay_label,
          'attributes' => array('class' => 'commerce-alipay-icon'),
        ));

        // Generate Instant Payment logo image markup.
        $directpay_label = t('Instant Payment');
        $directpay_icon = theme('image', array(
          'path' => $icons_path . 'directpay.gif',
          'title' => $alipay_label . ' - ' . $directpay_label,
          'alt' => $alipay_label . ' - ' . $directpay_label,
          'attributes' => array('class' => 'commerce-alipay-icon'),
        ));

        // Generate the aggregated markup.
        $value = $alipay_icon . '<span class="commerce-alipay-label">' . $alipay_label . '</span>';
        $value .= '<div class="commerce-alipay-directpay">' . $directpay_icon . '<span class="commerce-alipay-label">' . $directpay_label . '</span></div>';

        // Add module's CSS for the custom labels styles.
        $form['commerce_payment']['payment_method']['#attached']['css'][] = drupal_get_path('module', 'commerce_alipay_F2F') . '/theme/commerce_alipay_F2F.theme.css';

        break;
      }
    }
  }
}
